#!/usr/bin/env node

/**
 * LiveNovel Deployment Setup Script
 * Run this after cloning to set up environment
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üöÄ LiveNovel Deployment Setup\n');

function askQuestion(question) {
  return new Promise(resolve => {
    rl.question(question, resolve);
  });
}

async function setup() {
  try {
    console.log('This script will help you set up your environment variables.\n');

    // Check if .env.local already exists
    if (fs.existsSync('.env.local')) {
      const overwrite = await askQuestion('.env.local already exists. Overwrite? (y/n): ');
      if (overwrite.toLowerCase() !== 'y') {
        console.log('Setup cancelled.');
        rl.close();
        return;
      }
    }

    console.log('üìã Please provide the following information:\n');

    const mongoUri = await askQuestion('MongoDB URI (from Atlas): ');
    
    if (!mongoUri) {
      console.log('‚ùå MongoDB URI is required. Setup cancelled.');
      rl.close();
      return;
    }

    // Create .env.local file
    const envContent = `# LiveNovel Environment Variables
# Generated by setup script

# MongoDB Atlas Connection String
MONGODB_URI=${mongoUri}

# Optional: Add analytics tracking ID
# NEXT_PUBLIC_GA_ID=G-XXXXXXXXXX

# Development flag
NODE_ENV=development
`;

    fs.writeFileSync('.env.local', envContent);

    console.log('\n‚úÖ Environment setup complete!');
    console.log('üìÅ Created .env.local with your configuration');
    console.log('\nüöÄ Next steps:');
    console.log('   1. Run: npm install');
    console.log('   2. Run: npm run dev');
    console.log('   3. Open: http://localhost:3000');
    console.log('\nüìö Your LiveNovel platform should now work with your MongoDB data!');

  } catch (error) {
    console.error('‚ùå Setup failed:', error.message);
  } finally {
    rl.close();
  }
}

setup();